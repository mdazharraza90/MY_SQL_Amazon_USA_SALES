use amazon;

select  * from category;
select * from customers;
select * from inventory;
select * from order_items;
select * from orders;
select * from payments;
select * from products;
select * from sellers;
select * from shipping;


-- 
-- Advanced Business Problems:
-- 1. Top Selling Products
-- •	Query: Top 10 products by total sales value.
-- •	Challenge: Include product name, total quantity sold, and total sales value.



select  oi.product_id, p.product_name,count(oi.order_id) as total_count, round(sum(oi.quantity*oi.price_per_unit),2) as total_sales
from order_items oi
inner join products p
on p.product_id = oi.product_id
group by oi.product_id,p.product_name
order by total_sales desc limit 10;


-- 2. Revenue by Category
-- Query: Total revenue generated by each product category.
-- Challenge: Include the percentage contribution of each category to total revenue.

select * from products;
select * from category;
select * from order_items;

select sum(oi.quantity*oi.price_per_unit) from order_items oi;

select *, concat(round(total/sum(total) over()  * 100, 2), "%") as percentage  from 
(select  p.category_id,c.category_name,sum(oi.quantity*oi.price_per_unit) as total from order_items oi
left join
products p
on p.product_id = oi.product_id
left join
category c
on c.category_id = p.category_id
group by 1,2)perc;

-- 3. Average Order Value (AOV)
-- 	Query: Compute the average order value for each customer.
-- 	Challenge: Include only customers with more than 5 orders.

select * from orders; -- customer_id -- order_id
select * from order_items; -- avg(quantity*price_per_unit), order_id
select * from customers; -- customer_id

select o.customer_id,concat(c.first_name, " ", c.last_name) as name ,count(oi.order_id) as avg_count, 
sum(oi.quantity*oi.price_per_unit)/count(o.order_id) as average from order_items oi
left join 
orders o 
on o.order_id = oi.order_id
left join customers c on
c.customer_id = o.customer_id
group by 1,2
having avg_count > 5
order by avg_count;

/*
4. Monthly Sales Trend
Query monthly total sales over all years
Challenge: Display the sales trend, grouping by month, return current_month sale, last month sale!
*/

select * ,lag(total_sales) over (partition by year order by month) as comparison, 
round(sum(total_sales) over(partition by year),2) as total_sales_by_year from 
(select extract(year from o.order_date) as year, extract(month from o.order_date)  as month,
sum(oi.quantity*oi.price_per_unit) as total_sales from orders o 
left join order_items oi 
on o.order_id = oi.order_id
group by 1,2
order by 1,2)
monthly_sales;


/* 5. Customers with No Purchases
Query: Find customers who have registered but never placed an order.
Challenge: List customer details and the time since their registration.
*/

select * from customers; -- customer_id, first_name,_last_name
select * from orders ; -- customer_id

select * from customers;

select * from orders;

select c.customer_id, concat(c.first_name, " ", c.last_name) as fullname from customers c
left join
orders o
on c.customer_id = o.customer_id
where o.customer_id is null;

/* 6. Least-Selling Categories by State
•	Query: Identify the least-selling product category for each state.
•	Challenge: Include the total sales for that category within each state.
*/

select * from customers;  -- state 898
select * from products; -- product id, category id 765
select * from orders; -- order_id,  product id, quantity 21629
select * from category; -- category_id, category_name
select * from order_items; -- order_id, product_id


select * from (select *, rank() over(partition by state order by total_sales) as _rank from 
(select c.state, cg.category_name, sum(oi.quantity*oi.price_per_unit) as total_sales from customers c
right join 
orders o
on o.customer_id = c.customer_id
join 
order_items oi
on oi.order_id = o.order_id
join products p
on oi.product_id = p.product_id
join category cg
on cg.category_id = p.category_id
group by 1,2) sales)least_sales
where _rank  = 1
order by total_sales; 


/*7. Customer Lifetime Value (CLTV)
•	Query: Calculate the total value of orders placed by each customer over their lifetime.
•	Challenge: Rank customers based on their CLTV.
*/


select *, dense_rank() over( order by total_sum desc) as _rank from 
(select c.customer_id, concat(c.first_name, " ", c.last_name) as full_name, 
round(sum(quantity*price_per_unit),2) as total_sum from customers c
left join orders o
on o.customer_id = c.customer_id
right join order_items oi
on oi.order_id = o.order_id
group by 1,2) total_sales_ranking;


/*
8. Inventory Stock Alerts
Query: Products with stock levels below a certain threshold (e.g., less than 10 units).
Challenge: Include last restock date and warehouse information.
*/

select  p.product_name, i.inventory_id,i.stock, i.warehouse_id, i.last_stock_date from products p 
join 
inventory i 
on p.product_id = i.product_id 
where stock < 10;

/*
9. Shipping Delays
Query: Identify orders where the shipping date is later than 3 days after the order date.
Challenge: Include customer, order details, and delivery provider.
*/

select o.customer_id, concat(c.first_name," ",c.last_name) as full_name,o.order_id, o.order_date, s.shipping_date, s.shipping_providers, 
datediff(s.shipping_date, o.order_date) as delivered_within_days  from orders o 
inner join shipping s
on s.order_id = o.order_id
join customers c
on c.customer_id = o.customer_id
where datediff(s.shipping_date, o.order_date) > 3
order by delivered_within_days;


/*
10. Payment Success Rate 
Calculate the percentage of successful payments across all orders.
Challenge: Include breakdowns by payment status (e.g., failed, pending).
*/

select *, concat(round(total/(select count(*) from payments),2), "%") as percentage from 
(select payment_status, count(payment_status) as total from payments
group by payment_status)perc;

/*
11. Top Performing Sellers
	Query: Find the top 5 sellers based on total sales value.
    Challenge: Include both successful and failed orders, and display their percentage of successful orders.
*/

with cte1 as (select s.seller_id , s.seller_name, sum(oi.quantity*oi.price_per_unit) as total_sales from orders o
join sellers s
on o.seller_id = s.seller_id
join order_items oi
on (o.order_id = oi.order_id) 
group by 1,2
order by 3 desc 
limit 5),
cte2 as (select o.order_status, o.seller_id,t5.seller_name,count(*) as total_orders
from orders o
join cte1 as t5
on (t5.seller_id = o.seller_id)
where o.order_status not in ("Inprogress","Returned")
group by 1,2,3)
select seller_id, seller_name, sum(case when order_status = "Completed" then total_orders else 0 end) as completed_orders,
sum(case when order_status = "cancelled" then total_orders else 0 end) as cancelled_orders,
sum(total_orders) as all_orders,
concat(round(sum(case when order_status = "Completed" then total_orders else 0 end)/sum(total_orders) * 100,2), "%") as percentage
from cte2
group by 1,2
order by percentage desc;




/*12. Product Profit Margin
Query: Calculate the profit margin for each product (difference between price and cost of goods sold).
Challenge: Rank products by their profit margin, showing highest to lowest.
*/

select *, dense_rank() over(order by profit desc) as ranking from 
(select p.product_id, p.product_name, round(sum(oi.quantity*oi.price_per_unit - p.cogs*oi.quantity),2) as profit from products p
right join 
order_items oi
on oi.product_id = p.product_id
group by 1,2
order by 3 desc) profit;


/*
13. Most Returned Products
	Query: Top 10 products by the number of returns.
	Challenge: Display the return rate as a percentage of total units sold for each product.
*/

select oi.product_id, p.product_name, count(*) as total_orders, sum(case when o.order_status = "returned" then 1 else 0 end) as returned_orders, 
sum(case when o.order_status = "returned" then 1 else 0 end)/count(*) * 100 as returned_perc from order_items oi
left join products p
on oi.product_id = p.product_id
join
orders o 
on oi.order_id =  o.order_id
group by 1,2
order by returned_perc desc
limit 10;


/*14. Orders Pending Shipment
	Query: Find orders that have been paid but are still pending shipment.
	Challenge: Include order details, payment date, and customer information.
*/

select  o.order_id, concat(c.first_name, " ", c.last_name)full_name, o.order_status,p.payment_date, p.payment_status from orders o
join payments p
on p.order_id =  o.order_id
join 
customers c
on c.customer_id =  o.order_id
WHERE 
p.payment_status='Payment Successed'
AND o.order_status='Inprogress';


/*15. Identify Returning or New Customers
if the customer has done more than 5 return categorize them as returning otherwise new
Challenge: List customers id, name, total orders, total returns
*/

select customer_id , full_name, total, (case when returned_customer > 5 then "returned customers " else "new" end) as returned__customer
 from (select c.customer_id, concat(c.first_name," ", c.last_name) as full_name,count(o.order_id) as total ,
 sum(case when o.order_status = "returned" then 1 else 0 end) as returned_customer from customers c
right join orders o 
on o.customer_id = c.customer_id
group by 1,2)abc;


/*
16. Top 5 Customers by Orders in Each State
Identify the top 5 customers with the highest number of orders for each state.
Challenge: Include the number of orders and total sales for each customer.
*/

select * from (select * , dense_rank() over (partition by state order by total desc) as state_rank from 
(select concat(c.first_name," ", c.last_name) as full_name, c.state, count(oi.order_id) as total_orders ,
sum(oi.quantity*oi.price_per_unit) as total from order_items oi
join
orders o
on (o.order_id = oi.order_id)
join customers c
on (c.customer_id = o.customer_id)
group by 1,2
order by total desc) abc) def
where state_rank <=5;


/* 17. Revenue by Shipping Provider
•	Query: Calculate the total revenue handled by each shipping provider.
•	Challenge: Include the total number of orders handled and the average delivery time for each provider.  */


Select 
	s.shipping_providers,
    sum(oi.quantity*oi.price_per_unit) as Total_Sales,
    count(o.order_id) as No_of_orders,
    round(avg(datediff(s.shipping_date,o.order_date)),0) as time_taken_in_days
from shipping s
left join order_items oi
	on s.order_id=oi.order_id
left join orders o
	on o.order_id=oi.order_id
group by 1;